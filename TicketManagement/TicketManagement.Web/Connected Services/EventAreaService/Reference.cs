//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.Web.EventAreaService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventArea", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class EventArea : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordinateXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoordinateYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordinateX {
            get {
                return this.CoordinateXField;
            }
            set {
                if ((this.CoordinateXField.Equals(value) != true)) {
                    this.CoordinateXField = value;
                    this.RaisePropertyChanged("CoordinateX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CoordinateY {
            get {
                return this.CoordinateYField;
            }
            set {
                if ((this.CoordinateYField.Equals(value) != true)) {
                    this.CoordinateYField = value;
                    this.RaisePropertyChanged("CoordinateY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventAreaService.IEventAreaContract")]
    public interface IEventAreaContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreas", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreasResponse")]
        TicketManagement.Web.EventAreaService.EventArea[] GetEventAreas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreas", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreasResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea[]> GetEventAreasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventArea", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreaResponse")]
        TicketManagement.Web.EventAreaService.EventArea GetEventArea(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventArea", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreaResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea> GetEventAreaAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/UpdateEventArea", ReplyAction="http://tempuri.org/IEventAreaContract/UpdateEventAreaResponse")]
        void UpdateEventArea(TicketManagement.Web.EventAreaService.EventArea entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/UpdateEventArea", ReplyAction="http://tempuri.org/IEventAreaContract/UpdateEventAreaResponse")]
        System.Threading.Tasks.Task UpdateEventAreaAsync(TicketManagement.Web.EventAreaService.EventArea entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreaCost", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreaCostResponse")]
        decimal GetEventAreaCost(int seatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreaCost", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreaCostResponse")]
        System.Threading.Tasks.Task<decimal> GetEventAreaCostAsync(int seatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreasByEventSeatIds", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreasByEventSeatIdsResponse")]
        TicketManagement.Web.EventAreaService.EventArea[] GetEventAreasByEventSeatIds(int[] eventSeatIdArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreasByEventSeatIds", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreasByEventSeatIdsResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea[]> GetEventAreasByEventSeatIdsAsync(int[] eventSeatIdArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreasByEventId", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreasByEventIdResponse")]
        TicketManagement.Web.EventAreaService.EventArea[] GetEventAreasByEventId(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventAreaContract/GetEventAreasByEventId", ReplyAction="http://tempuri.org/IEventAreaContract/GetEventAreasByEventIdResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea[]> GetEventAreasByEventIdAsync(int eventId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventAreaContractChannel : TicketManagement.Web.EventAreaService.IEventAreaContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventAreaContractClient : System.ServiceModel.ClientBase<TicketManagement.Web.EventAreaService.IEventAreaContract>, TicketManagement.Web.EventAreaService.IEventAreaContract {
        
        public EventAreaContractClient() {
        }
        
        public EventAreaContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventAreaContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventAreaContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventAreaContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TicketManagement.Web.EventAreaService.EventArea[] GetEventAreas() {
            return base.Channel.GetEventAreas();
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea[]> GetEventAreasAsync() {
            return base.Channel.GetEventAreasAsync();
        }
        
        public TicketManagement.Web.EventAreaService.EventArea GetEventArea(int id) {
            return base.Channel.GetEventArea(id);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea> GetEventAreaAsync(int id) {
            return base.Channel.GetEventAreaAsync(id);
        }
        
        public void UpdateEventArea(TicketManagement.Web.EventAreaService.EventArea entity) {
            base.Channel.UpdateEventArea(entity);
        }
        
        public System.Threading.Tasks.Task UpdateEventAreaAsync(TicketManagement.Web.EventAreaService.EventArea entity) {
            return base.Channel.UpdateEventAreaAsync(entity);
        }
        
        public decimal GetEventAreaCost(int seatId) {
            return base.Channel.GetEventAreaCost(seatId);
        }
        
        public System.Threading.Tasks.Task<decimal> GetEventAreaCostAsync(int seatId) {
            return base.Channel.GetEventAreaCostAsync(seatId);
        }
        
        public TicketManagement.Web.EventAreaService.EventArea[] GetEventAreasByEventSeatIds(int[] eventSeatIdArray) {
            return base.Channel.GetEventAreasByEventSeatIds(eventSeatIdArray);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea[]> GetEventAreasByEventSeatIdsAsync(int[] eventSeatIdArray) {
            return base.Channel.GetEventAreasByEventSeatIdsAsync(eventSeatIdArray);
        }
        
        public TicketManagement.Web.EventAreaService.EventArea[] GetEventAreasByEventId(int eventId) {
            return base.Channel.GetEventAreasByEventId(eventId);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventAreaService.EventArea[]> GetEventAreasByEventIdAsync(int eventId) {
            return base.Channel.GetEventAreasByEventIdAsync(eventId);
        }
    }
}
