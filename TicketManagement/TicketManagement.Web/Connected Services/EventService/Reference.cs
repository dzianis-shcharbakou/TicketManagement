//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.Web.EventService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class Event : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BeginDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LayoutIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PublishedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginDateUtc {
            get {
                return this.BeginDateUtcField;
            }
            set {
                if ((this.BeginDateUtcField.Equals(value) != true)) {
                    this.BeginDateUtcField = value;
                    this.RaisePropertyChanged("BeginDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDateUtc {
            get {
                return this.EndDateUtcField;
            }
            set {
                if ((this.EndDateUtcField.Equals(value) != true)) {
                    this.EndDateUtcField = value;
                    this.RaisePropertyChanged("EndDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LayoutId {
            get {
                return this.LayoutIdField;
            }
            set {
                if ((this.LayoutIdField.Equals(value) != true)) {
                    this.LayoutIdField = value;
                    this.RaisePropertyChanged("LayoutId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Published {
            get {
                return this.PublishedField;
            }
            set {
                if ((this.PublishedField.Equals(value) != true)) {
                    this.PublishedField = value;
                    this.RaisePropertyChanged("Published");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions.Ba" +
        "se")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.EventInPastException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.BeginDateLongerThenEndDateException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.EventExistInTheLayoutInThisTimeException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.LayoutHasNotAreaException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.LayoutHasNotSeatException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.LayoutHasSoldSeatAndCouldNotBeChangeException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.EventAlreadyPublishedException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.SomeAreaHasNotPriceException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.EventService.EntityDoesNotExistException))]
    public partial class WcfException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Type ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventInPastException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class EventInPastException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BeginDateLongerThenEndDateException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class BeginDateLongerThenEndDateException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventExistInTheLayoutInThisTimeException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class EventExistInTheLayoutInThisTimeException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LayoutHasNotAreaException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class LayoutHasNotAreaException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LayoutHasNotSeatException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class LayoutHasNotSeatException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LayoutHasSoldSeatAndCouldNotBeChangeException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class LayoutHasSoldSeatAndCouldNotBeChangeException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventAlreadyPublishedException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class EventAlreadyPublishedException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SomeAreaHasNotPriceException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class SomeAreaHasNotPriceException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
    [System.SerializableAttribute()]
    public partial class EntityDoesNotExistException : TicketManagement.Web.EventService.WcfException {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IEventContract")]
    public interface IEventContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEvents", ReplyAction="http://tempuri.org/IEventContract/GetEventsResponse")]
        TicketManagement.Web.EventService.Event[] GetEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEvents", ReplyAction="http://tempuri.org/IEventContract/GetEventsResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event[]> GetEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEvent", ReplyAction="http://tempuri.org/IEventContract/GetEventResponse")]
        TicketManagement.Web.EventService.Event GetEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEvent", ReplyAction="http://tempuri.org/IEventContract/GetEventResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event> GetEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/AddEvent", ReplyAction="http://tempuri.org/IEventContract/AddEventResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.EntityDoesNotExistException), Action="http://tempuri.org/IEventContract/AddEventEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.EventInPastException), Action="http://tempuri.org/IEventContract/AddEventEventInPastExceptionFault", Name="EventInPastException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.BeginDateLongerThenEndDateException), Action="http://tempuri.org/IEventContract/AddEventBeginDateLongerThenEndDateExceptionFaul" +
            "t", Name="BeginDateLongerThenEndDateException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.EventExistInTheLayoutInThisTimeException), Action="http://tempuri.org/IEventContract/AddEventEventExistInTheLayoutInThisTimeExceptio" +
            "nFault", Name="EventExistInTheLayoutInThisTimeException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.LayoutHasNotAreaException), Action="http://tempuri.org/IEventContract/AddEventLayoutHasNotAreaExceptionFault", Name="LayoutHasNotAreaException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.LayoutHasNotSeatException), Action="http://tempuri.org/IEventContract/AddEventLayoutHasNotSeatExceptionFault", Name="LayoutHasNotSeatException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        int AddEvent(TicketManagement.Web.EventService.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/AddEvent", ReplyAction="http://tempuri.org/IEventContract/AddEventResponse")]
        System.Threading.Tasks.Task<int> AddEventAsync(TicketManagement.Web.EventService.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/UpdateEvent", ReplyAction="http://tempuri.org/IEventContract/UpdateEventResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.LayoutHasSoldSeatAndCouldNotBeChangeException), Action="http://tempuri.org/IEventContract/UpdateEventLayoutHasSoldSeatAndCouldNotBeChange" +
            "ExceptionFault", Name="LayoutHasSoldSeatAndCouldNotBeChangeException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.EntityDoesNotExistException), Action="http://tempuri.org/IEventContract/UpdateEventEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.EventInPastException), Action="http://tempuri.org/IEventContract/UpdateEventEventInPastExceptionFault", Name="EventInPastException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.BeginDateLongerThenEndDateException), Action="http://tempuri.org/IEventContract/UpdateEventBeginDateLongerThenEndDateExceptionF" +
            "ault", Name="BeginDateLongerThenEndDateException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.EventExistInTheLayoutInThisTimeException), Action="http://tempuri.org/IEventContract/UpdateEventEventExistInTheLayoutInThisTimeExcep" +
            "tionFault", Name="EventExistInTheLayoutInThisTimeException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.LayoutHasNotAreaException), Action="http://tempuri.org/IEventContract/UpdateEventLayoutHasNotAreaExceptionFault", Name="LayoutHasNotAreaException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.LayoutHasNotSeatException), Action="http://tempuri.org/IEventContract/UpdateEventLayoutHasNotSeatExceptionFault", Name="LayoutHasNotSeatException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void UpdateEvent(TicketManagement.Web.EventService.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/UpdateEvent", ReplyAction="http://tempuri.org/IEventContract/UpdateEventResponse")]
        System.Threading.Tasks.Task UpdateEventAsync(TicketManagement.Web.EventService.Event entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/DeleteEvent", ReplyAction="http://tempuri.org/IEventContract/DeleteEventResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.LayoutHasSoldSeatAndCouldNotBeChangeException), Action="http://tempuri.org/IEventContract/DeleteEventLayoutHasSoldSeatAndCouldNotBeChange" +
            "ExceptionFault", Name="LayoutHasSoldSeatAndCouldNotBeChangeException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void DeleteEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/DeleteEvent", ReplyAction="http://tempuri.org/IEventContract/DeleteEventResponse")]
        System.Threading.Tasks.Task DeleteEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/PublishEvent", ReplyAction="http://tempuri.org/IEventContract/PublishEventResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.EventAlreadyPublishedException), Action="http://tempuri.org/IEventContract/PublishEventEventAlreadyPublishedExceptionFault" +
            "", Name="EventAlreadyPublishedException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.EventService.SomeAreaHasNotPriceException), Action="http://tempuri.org/IEventContract/PublishEventSomeAreaHasNotPriceExceptionFault", Name="SomeAreaHasNotPriceException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void PublishEvent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/PublishEvent", ReplyAction="http://tempuri.org/IEventContract/PublishEventResponse")]
        System.Threading.Tasks.Task PublishEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetPublishEvents", ReplyAction="http://tempuri.org/IEventContract/GetPublishEventsResponse")]
        TicketManagement.Web.EventService.Event[] GetPublishEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetPublishEvents", ReplyAction="http://tempuri.org/IEventContract/GetPublishEventsResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event[]> GetPublishEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetAvailableSeatCount", ReplyAction="http://tempuri.org/IEventContract/GetAvailableSeatCountResponse")]
        int GetAvailableSeatCount(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetAvailableSeatCount", ReplyAction="http://tempuri.org/IEventContract/GetAvailableSeatCountResponse")]
        System.Threading.Tasks.Task<int> GetAvailableSeatCountAsync(int eventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEventByEventSeatId", ReplyAction="http://tempuri.org/IEventContract/GetEventByEventSeatIdResponse")]
        TicketManagement.Web.EventService.Event GetEventByEventSeatId(int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEventByEventSeatId", ReplyAction="http://tempuri.org/IEventContract/GetEventByEventSeatIdResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event> GetEventByEventSeatIdAsync(int eventSeatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEventsByEventSeatIds", ReplyAction="http://tempuri.org/IEventContract/GetEventsByEventSeatIdsResponse")]
        TicketManagement.Web.EventService.Event[] GetEventsByEventSeatIds(int[] eventSeatIdArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventContract/GetEventsByEventSeatIds", ReplyAction="http://tempuri.org/IEventContract/GetEventsByEventSeatIdsResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event[]> GetEventsByEventSeatIdsAsync(int[] eventSeatIdArray);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventContractChannel : TicketManagement.Web.EventService.IEventContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventContractClient : System.ServiceModel.ClientBase<TicketManagement.Web.EventService.IEventContract>, TicketManagement.Web.EventService.IEventContract {
        
        public EventContractClient() {
        }
        
        public EventContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TicketManagement.Web.EventService.Event[] GetEvents() {
            return base.Channel.GetEvents();
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event[]> GetEventsAsync() {
            return base.Channel.GetEventsAsync();
        }
        
        public TicketManagement.Web.EventService.Event GetEvent(int id) {
            return base.Channel.GetEvent(id);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event> GetEventAsync(int id) {
            return base.Channel.GetEventAsync(id);
        }
        
        public int AddEvent(TicketManagement.Web.EventService.Event entity) {
            return base.Channel.AddEvent(entity);
        }
        
        public System.Threading.Tasks.Task<int> AddEventAsync(TicketManagement.Web.EventService.Event entity) {
            return base.Channel.AddEventAsync(entity);
        }
        
        public void UpdateEvent(TicketManagement.Web.EventService.Event entity) {
            base.Channel.UpdateEvent(entity);
        }
        
        public System.Threading.Tasks.Task UpdateEventAsync(TicketManagement.Web.EventService.Event entity) {
            return base.Channel.UpdateEventAsync(entity);
        }
        
        public void DeleteEvent(int id) {
            base.Channel.DeleteEvent(id);
        }
        
        public System.Threading.Tasks.Task DeleteEventAsync(int id) {
            return base.Channel.DeleteEventAsync(id);
        }
        
        public void PublishEvent(int id) {
            base.Channel.PublishEvent(id);
        }
        
        public System.Threading.Tasks.Task PublishEventAsync(int id) {
            return base.Channel.PublishEventAsync(id);
        }
        
        public TicketManagement.Web.EventService.Event[] GetPublishEvents() {
            return base.Channel.GetPublishEvents();
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event[]> GetPublishEventsAsync() {
            return base.Channel.GetPublishEventsAsync();
        }
        
        public int GetAvailableSeatCount(int eventId) {
            return base.Channel.GetAvailableSeatCount(eventId);
        }
        
        public System.Threading.Tasks.Task<int> GetAvailableSeatCountAsync(int eventId) {
            return base.Channel.GetAvailableSeatCountAsync(eventId);
        }
        
        public TicketManagement.Web.EventService.Event GetEventByEventSeatId(int eventSeatId) {
            return base.Channel.GetEventByEventSeatId(eventSeatId);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event> GetEventByEventSeatIdAsync(int eventSeatId) {
            return base.Channel.GetEventByEventSeatIdAsync(eventSeatId);
        }
        
        public TicketManagement.Web.EventService.Event[] GetEventsByEventSeatIds(int[] eventSeatIdArray) {
            return base.Channel.GetEventsByEventSeatIds(eventSeatIdArray);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.EventService.Event[]> GetEventsByEventSeatIdsAsync(int[] eventSeatIdArray) {
            return base.Channel.GetEventsByEventSeatIdsAsync(eventSeatIdArray);
        }
    }
}
