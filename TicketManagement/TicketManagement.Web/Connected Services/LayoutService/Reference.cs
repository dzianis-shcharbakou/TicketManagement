//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.Web.LayoutService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Layout", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class Layout : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VenueIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VenueId {
            get {
                return this.VenueIdField;
            }
            set {
                if ((this.VenueIdField.Equals(value) != true)) {
                    this.VenueIdField = value;
                    this.RaisePropertyChanged("VenueId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions.Ba" +
        "se")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.LayoutService.LayoutWithSameNameInTheVenueExistException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.LayoutService.EntityDoesNotExistException))]
    public partial class WcfException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Type ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LayoutWithSameNameInTheVenueExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class LayoutWithSameNameInTheVenueExistException : TicketManagement.Web.LayoutService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
    [System.SerializableAttribute()]
    public partial class EntityDoesNotExistException : TicketManagement.Web.LayoutService.WcfException {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LayoutService.ILayoutContract")]
    public interface ILayoutContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/GetLayouts", ReplyAction="http://tempuri.org/ILayoutContract/GetLayoutsResponse")]
        TicketManagement.Web.LayoutService.Layout[] GetLayouts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/GetLayouts", ReplyAction="http://tempuri.org/ILayoutContract/GetLayoutsResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.LayoutService.Layout[]> GetLayoutsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/GetLayout", ReplyAction="http://tempuri.org/ILayoutContract/GetLayoutResponse")]
        TicketManagement.Web.LayoutService.Layout GetLayout(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/GetLayout", ReplyAction="http://tempuri.org/ILayoutContract/GetLayoutResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.LayoutService.Layout> GetLayoutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/AddLayout", ReplyAction="http://tempuri.org/ILayoutContract/AddLayoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.LayoutService.EntityDoesNotExistException), Action="http://tempuri.org/ILayoutContract/AddLayoutEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.LayoutService.LayoutWithSameNameInTheVenueExistException), Action="http://tempuri.org/ILayoutContract/AddLayoutLayoutWithSameNameInTheVenueExistExce" +
            "ptionFault", Name="LayoutWithSameNameInTheVenueExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        int AddLayout(TicketManagement.Web.LayoutService.Layout entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/AddLayout", ReplyAction="http://tempuri.org/ILayoutContract/AddLayoutResponse")]
        System.Threading.Tasks.Task<int> AddLayoutAsync(TicketManagement.Web.LayoutService.Layout entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/UpdateLayout", ReplyAction="http://tempuri.org/ILayoutContract/UpdateLayoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.LayoutService.EntityDoesNotExistException), Action="http://tempuri.org/ILayoutContract/UpdateLayoutEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.LayoutService.LayoutWithSameNameInTheVenueExistException), Action="http://tempuri.org/ILayoutContract/UpdateLayoutLayoutWithSameNameInTheVenueExistE" +
            "xceptionFault", Name="LayoutWithSameNameInTheVenueExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void UpdateLayout(TicketManagement.Web.LayoutService.Layout entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/UpdateLayout", ReplyAction="http://tempuri.org/ILayoutContract/UpdateLayoutResponse")]
        System.Threading.Tasks.Task UpdateLayoutAsync(TicketManagement.Web.LayoutService.Layout entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/DeleteLayout", ReplyAction="http://tempuri.org/ILayoutContract/DeleteLayoutResponse")]
        void DeleteLayout(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/DeleteLayout", ReplyAction="http://tempuri.org/ILayoutContract/DeleteLayoutResponse")]
        System.Threading.Tasks.Task DeleteLayoutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/GetLayoutsByLayoutIds", ReplyAction="http://tempuri.org/ILayoutContract/GetLayoutsByLayoutIdsResponse")]
        TicketManagement.Web.LayoutService.Layout[] GetLayoutsByLayoutIds(int[] layoutIdArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILayoutContract/GetLayoutsByLayoutIds", ReplyAction="http://tempuri.org/ILayoutContract/GetLayoutsByLayoutIdsResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.LayoutService.Layout[]> GetLayoutsByLayoutIdsAsync(int[] layoutIdArray);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILayoutContractChannel : TicketManagement.Web.LayoutService.ILayoutContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LayoutContractClient : System.ServiceModel.ClientBase<TicketManagement.Web.LayoutService.ILayoutContract>, TicketManagement.Web.LayoutService.ILayoutContract {
        
        public LayoutContractClient() {
        }
        
        public LayoutContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LayoutContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LayoutContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LayoutContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TicketManagement.Web.LayoutService.Layout[] GetLayouts() {
            return base.Channel.GetLayouts();
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.LayoutService.Layout[]> GetLayoutsAsync() {
            return base.Channel.GetLayoutsAsync();
        }
        
        public TicketManagement.Web.LayoutService.Layout GetLayout(int id) {
            return base.Channel.GetLayout(id);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.LayoutService.Layout> GetLayoutAsync(int id) {
            return base.Channel.GetLayoutAsync(id);
        }
        
        public int AddLayout(TicketManagement.Web.LayoutService.Layout entity) {
            return base.Channel.AddLayout(entity);
        }
        
        public System.Threading.Tasks.Task<int> AddLayoutAsync(TicketManagement.Web.LayoutService.Layout entity) {
            return base.Channel.AddLayoutAsync(entity);
        }
        
        public void UpdateLayout(TicketManagement.Web.LayoutService.Layout entity) {
            base.Channel.UpdateLayout(entity);
        }
        
        public System.Threading.Tasks.Task UpdateLayoutAsync(TicketManagement.Web.LayoutService.Layout entity) {
            return base.Channel.UpdateLayoutAsync(entity);
        }
        
        public void DeleteLayout(int id) {
            base.Channel.DeleteLayout(id);
        }
        
        public System.Threading.Tasks.Task DeleteLayoutAsync(int id) {
            return base.Channel.DeleteLayoutAsync(id);
        }
        
        public TicketManagement.Web.LayoutService.Layout[] GetLayoutsByLayoutIds(int[] layoutIdArray) {
            return base.Channel.GetLayoutsByLayoutIds(layoutIdArray);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.LayoutService.Layout[]> GetLayoutsByLayoutIdsAsync(int[] layoutIdArray) {
            return base.Channel.GetLayoutsByLayoutIdsAsync(layoutIdArray);
        }
    }
}
