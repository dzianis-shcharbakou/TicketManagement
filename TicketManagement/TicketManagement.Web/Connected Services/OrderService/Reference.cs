//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.Web.OrderService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions.Ba" +
        "se")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.OrderService.SeatCurrentlySoldOrBlockedException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.OrderService.NotEnoughMoneyException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.OrderService.SeatIsNotInTheBasketException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.OrderService.EntityDoesNotExistException))]
    public partial class WcfException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Type ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SeatCurrentlySoldOrBlockedException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class SeatCurrentlySoldOrBlockedException : TicketManagement.Web.OrderService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotEnoughMoneyException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class NotEnoughMoneyException : TicketManagement.Web.OrderService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SeatIsNotInTheBasketException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class SeatIsNotInTheBasketException : TicketManagement.Web.OrderService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
    [System.SerializableAttribute()]
    public partial class EntityDoesNotExistException : TicketManagement.Web.OrderService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class Order : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventSeatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateUtc {
            get {
                return this.DateUtcField;
            }
            set {
                if ((this.DateUtcField.Equals(value) != true)) {
                    this.DateUtcField = value;
                    this.RaisePropertyChanged("DateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventSeatId {
            get {
                return this.EventSeatIdField;
            }
            set {
                if ((this.EventSeatIdField.Equals(value) != true)) {
                    this.EventSeatIdField = value;
                    this.RaisePropertyChanged("EventSeatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderService.IOrderContract")]
    public interface IOrderContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/AddToCart", ReplyAction="http://tempuri.org/IOrderContract/AddToCartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.OrderService.EntityDoesNotExistException), Action="http://tempuri.org/IOrderContract/AddToCartEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.OrderService.SeatCurrentlySoldOrBlockedException), Action="http://tempuri.org/IOrderContract/AddToCartSeatCurrentlySoldOrBlockedExceptionFau" +
            "lt", Name="SeatCurrentlySoldOrBlockedException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void AddToCart(int eventSeatId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/AddToCart", ReplyAction="http://tempuri.org/IOrderContract/AddToCartResponse")]
        System.Threading.Tasks.Task AddToCartAsync(int eventSeatId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/Buy", ReplyAction="http://tempuri.org/IOrderContract/BuyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.OrderService.NotEnoughMoneyException), Action="http://tempuri.org/IOrderContract/BuyNotEnoughMoneyExceptionFault", Name="NotEnoughMoneyException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.OrderService.EntityDoesNotExistException), Action="http://tempuri.org/IOrderContract/BuyEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.OrderService.SeatIsNotInTheBasketException), Action="http://tempuri.org/IOrderContract/BuySeatIsNotInTheBasketExceptionFault", Name="SeatIsNotInTheBasketException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void Buy(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/Buy", ReplyAction="http://tempuri.org/IOrderContract/BuyResponse")]
        System.Threading.Tasks.Task BuyAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/DeleteFromCart", ReplyAction="http://tempuri.org/IOrderContract/DeleteFromCartResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.OrderService.EntityDoesNotExistException), Action="http://tempuri.org/IOrderContract/DeleteFromCartEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.OrderService.SeatIsNotInTheBasketException), Action="http://tempuri.org/IOrderContract/DeleteFromCartSeatIsNotInTheBasketExceptionFaul" +
            "t", Name="SeatIsNotInTheBasketException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void DeleteFromCart(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/DeleteFromCart", ReplyAction="http://tempuri.org/IOrderContract/DeleteFromCartResponse")]
        System.Threading.Tasks.Task DeleteFromCartAsync(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetHistoryOrdersById", ReplyAction="http://tempuri.org/IOrderContract/GetHistoryOrdersByIdResponse")]
        TicketManagement.Web.OrderService.Order[] GetHistoryOrdersById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetHistoryOrdersById", ReplyAction="http://tempuri.org/IOrderContract/GetHistoryOrdersByIdResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetHistoryOrdersByIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetHistoryOrdersByName", ReplyAction="http://tempuri.org/IOrderContract/GetHistoryOrdersByNameResponse")]
        TicketManagement.Web.OrderService.Order[] GetHistoryOrdersByName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetHistoryOrdersByName", ReplyAction="http://tempuri.org/IOrderContract/GetHistoryOrdersByNameResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetHistoryOrdersByNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetCartOrdersById", ReplyAction="http://tempuri.org/IOrderContract/GetCartOrdersByIdResponse")]
        TicketManagement.Web.OrderService.Order[] GetCartOrdersById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetCartOrdersById", ReplyAction="http://tempuri.org/IOrderContract/GetCartOrdersByIdResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetCartOrdersByIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetCartOrdersByName", ReplyAction="http://tempuri.org/IOrderContract/GetCartOrdersByNameResponse")]
        TicketManagement.Web.OrderService.Order[] GetCartOrdersByName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderContract/GetCartOrdersByName", ReplyAction="http://tempuri.org/IOrderContract/GetCartOrdersByNameResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetCartOrdersByNameAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderContractChannel : TicketManagement.Web.OrderService.IOrderContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderContractClient : System.ServiceModel.ClientBase<TicketManagement.Web.OrderService.IOrderContract>, TicketManagement.Web.OrderService.IOrderContract {
        
        public OrderContractClient() {
        }
        
        public OrderContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddToCart(int eventSeatId, int userId) {
            base.Channel.AddToCart(eventSeatId, userId);
        }
        
        public System.Threading.Tasks.Task AddToCartAsync(int eventSeatId, int userId) {
            return base.Channel.AddToCartAsync(eventSeatId, userId);
        }
        
        public void Buy(int orderId) {
            base.Channel.Buy(orderId);
        }
        
        public System.Threading.Tasks.Task BuyAsync(int orderId) {
            return base.Channel.BuyAsync(orderId);
        }
        
        public void DeleteFromCart(int orderId) {
            base.Channel.DeleteFromCart(orderId);
        }
        
        public System.Threading.Tasks.Task DeleteFromCartAsync(int orderId) {
            return base.Channel.DeleteFromCartAsync(orderId);
        }
        
        public TicketManagement.Web.OrderService.Order[] GetHistoryOrdersById(int userId) {
            return base.Channel.GetHistoryOrdersById(userId);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetHistoryOrdersByIdAsync(int userId) {
            return base.Channel.GetHistoryOrdersByIdAsync(userId);
        }
        
        public TicketManagement.Web.OrderService.Order[] GetHistoryOrdersByName(string userName) {
            return base.Channel.GetHistoryOrdersByName(userName);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetHistoryOrdersByNameAsync(string userName) {
            return base.Channel.GetHistoryOrdersByNameAsync(userName);
        }
        
        public TicketManagement.Web.OrderService.Order[] GetCartOrdersById(int userId) {
            return base.Channel.GetCartOrdersById(userId);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetCartOrdersByIdAsync(int userId) {
            return base.Channel.GetCartOrdersByIdAsync(userId);
        }
        
        public TicketManagement.Web.OrderService.Order[] GetCartOrdersByName(string userName) {
            return base.Channel.GetCartOrdersByName(userName);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.OrderService.Order[]> GetCartOrdersByNameAsync(string userName) {
            return base.Channel.GetCartOrdersByNameAsync(userName);
        }
    }
}
