//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.Web.SeatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Seat", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class Seat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AreaIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AreaId {
            get {
                return this.AreaIdField;
            }
            set {
                if ((this.AreaIdField.Equals(value) != true)) {
                    this.AreaIdField = value;
                    this.RaisePropertyChanged("AreaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Row {
            get {
                return this.RowField;
            }
            set {
                if ((this.RowField.Equals(value) != true)) {
                    this.RowField = value;
                    this.RaisePropertyChanged("Row");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions.Ba" +
        "se")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.SeatService.SeatWithSameRowAndNumberInTheAreaExistException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.SeatService.EntityDoesNotExistException))]
    public partial class WcfException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Type ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SeatWithSameRowAndNumberInTheAreaExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class SeatWithSameRowAndNumberInTheAreaExistException : TicketManagement.Web.SeatService.WcfException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
    [System.SerializableAttribute()]
    public partial class EntityDoesNotExistException : TicketManagement.Web.SeatService.WcfException {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SeatService.ISeatContract")]
    public interface ISeatContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/GetSeats", ReplyAction="http://tempuri.org/ISeatContract/GetSeatsResponse")]
        TicketManagement.Web.SeatService.Seat[] GetSeats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/GetSeats", ReplyAction="http://tempuri.org/ISeatContract/GetSeatsResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.SeatService.Seat[]> GetSeatsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/GetSeat", ReplyAction="http://tempuri.org/ISeatContract/GetSeatResponse")]
        TicketManagement.Web.SeatService.Seat GetSeat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/GetSeat", ReplyAction="http://tempuri.org/ISeatContract/GetSeatResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.SeatService.Seat> GetSeatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/AddSeat", ReplyAction="http://tempuri.org/ISeatContract/AddSeatResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.SeatService.EntityDoesNotExistException), Action="http://tempuri.org/ISeatContract/AddSeatEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.SeatService.SeatWithSameRowAndNumberInTheAreaExistException), Action="http://tempuri.org/ISeatContract/AddSeatSeatWithSameRowAndNumberInTheAreaExistExc" +
            "eptionFault", Name="SeatWithSameRowAndNumberInTheAreaExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        int AddSeat(TicketManagement.Web.SeatService.Seat entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/AddSeat", ReplyAction="http://tempuri.org/ISeatContract/AddSeatResponse")]
        System.Threading.Tasks.Task<int> AddSeatAsync(TicketManagement.Web.SeatService.Seat entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/UpdateSeat", ReplyAction="http://tempuri.org/ISeatContract/UpdateSeatResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.SeatService.EntityDoesNotExistException), Action="http://tempuri.org/ISeatContract/UpdateSeatEntityDoesNotExistExceptionFault", Name="EntityDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.SeatService.SeatWithSameRowAndNumberInTheAreaExistException), Action="http://tempuri.org/ISeatContract/UpdateSeatSeatWithSameRowAndNumberInTheAreaExist" +
            "ExceptionFault", Name="SeatWithSameRowAndNumberInTheAreaExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void UpdateSeat(TicketManagement.Web.SeatService.Seat entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/UpdateSeat", ReplyAction="http://tempuri.org/ISeatContract/UpdateSeatResponse")]
        System.Threading.Tasks.Task UpdateSeatAsync(TicketManagement.Web.SeatService.Seat entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/DeleteSeat", ReplyAction="http://tempuri.org/ISeatContract/DeleteSeatResponse")]
        void DeleteSeat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISeatContract/DeleteSeat", ReplyAction="http://tempuri.org/ISeatContract/DeleteSeatResponse")]
        System.Threading.Tasks.Task DeleteSeatAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISeatContractChannel : TicketManagement.Web.SeatService.ISeatContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SeatContractClient : System.ServiceModel.ClientBase<TicketManagement.Web.SeatService.ISeatContract>, TicketManagement.Web.SeatService.ISeatContract {
        
        public SeatContractClient() {
        }
        
        public SeatContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SeatContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SeatContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SeatContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TicketManagement.Web.SeatService.Seat[] GetSeats() {
            return base.Channel.GetSeats();
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.SeatService.Seat[]> GetSeatsAsync() {
            return base.Channel.GetSeatsAsync();
        }
        
        public TicketManagement.Web.SeatService.Seat GetSeat(int id) {
            return base.Channel.GetSeat(id);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.SeatService.Seat> GetSeatAsync(int id) {
            return base.Channel.GetSeatAsync(id);
        }
        
        public int AddSeat(TicketManagement.Web.SeatService.Seat entity) {
            return base.Channel.AddSeat(entity);
        }
        
        public System.Threading.Tasks.Task<int> AddSeatAsync(TicketManagement.Web.SeatService.Seat entity) {
            return base.Channel.AddSeatAsync(entity);
        }
        
        public void UpdateSeat(TicketManagement.Web.SeatService.Seat entity) {
            base.Channel.UpdateSeat(entity);
        }
        
        public System.Threading.Tasks.Task UpdateSeatAsync(TicketManagement.Web.SeatService.Seat entity) {
            return base.Channel.UpdateSeatAsync(entity);
        }
        
        public void DeleteSeat(int id) {
            base.Channel.DeleteSeat(id);
        }
        
        public System.Threading.Tasks.Task DeleteSeatAsync(int id) {
            return base.Channel.DeleteSeatAsync(id);
        }
    }
}
