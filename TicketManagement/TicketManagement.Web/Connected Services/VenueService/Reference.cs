//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketManagement.Web.VenueService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Venue", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class Venue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WcfException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Exceptions.Ba" +
        "se")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TicketManagement.Web.VenueService.VenueWithThisNameExistException))]
    public partial class WcfException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Type ExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type Exception {
            get {
                return this.ExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionField, value) != true)) {
                    this.ExceptionField = value;
                    this.RaisePropertyChanged("Exception");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VenueWithThisNameExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
    [System.SerializableAttribute()]
    public partial class VenueWithThisNameExistException : TicketManagement.Web.VenueService.WcfException {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="VenueService.IVenueContract")]
    public interface IVenueContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/GetVenues", ReplyAction="http://tempuri.org/IVenueContract/GetVenuesResponse")]
        TicketManagement.Web.VenueService.Venue[] GetVenues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/GetVenues", ReplyAction="http://tempuri.org/IVenueContract/GetVenuesResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.VenueService.Venue[]> GetVenuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/GetVenue", ReplyAction="http://tempuri.org/IVenueContract/GetVenueResponse")]
        TicketManagement.Web.VenueService.Venue GetVenue(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/GetVenue", ReplyAction="http://tempuri.org/IVenueContract/GetVenueResponse")]
        System.Threading.Tasks.Task<TicketManagement.Web.VenueService.Venue> GetVenueAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/AddVenue", ReplyAction="http://tempuri.org/IVenueContract/AddVenueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.VenueService.VenueWithThisNameExistException), Action="http://tempuri.org/IVenueContract/AddVenueVenueWithThisNameExistExceptionFault", Name="VenueWithThisNameExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        int AddVenue(TicketManagement.Web.VenueService.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/AddVenue", ReplyAction="http://tempuri.org/IVenueContract/AddVenueResponse")]
        System.Threading.Tasks.Task<int> AddVenueAsync(TicketManagement.Web.VenueService.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/UpdateVenue", ReplyAction="http://tempuri.org/IVenueContract/UpdateVenueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TicketManagement.Web.VenueService.VenueWithThisNameExistException), Action="http://tempuri.org/IVenueContract/UpdateVenueVenueWithThisNameExistExceptionFault" +
            "", Name="VenueWithThisNameExistException", Namespace="http://schemas.datacontract.org/2004/07/TicketManagement.WcfService.Contracts")]
        void UpdateVenue(TicketManagement.Web.VenueService.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/UpdateVenue", ReplyAction="http://tempuri.org/IVenueContract/UpdateVenueResponse")]
        System.Threading.Tasks.Task UpdateVenueAsync(TicketManagement.Web.VenueService.Venue entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/DeleteVenue", ReplyAction="http://tempuri.org/IVenueContract/DeleteVenueResponse")]
        void DeleteVenue(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVenueContract/DeleteVenue", ReplyAction="http://tempuri.org/IVenueContract/DeleteVenueResponse")]
        System.Threading.Tasks.Task DeleteVenueAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVenueContractChannel : TicketManagement.Web.VenueService.IVenueContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VenueContractClient : System.ServiceModel.ClientBase<TicketManagement.Web.VenueService.IVenueContract>, TicketManagement.Web.VenueService.IVenueContract {
        
        public VenueContractClient() {
        }
        
        public VenueContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VenueContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VenueContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VenueContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TicketManagement.Web.VenueService.Venue[] GetVenues() {
            return base.Channel.GetVenues();
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.VenueService.Venue[]> GetVenuesAsync() {
            return base.Channel.GetVenuesAsync();
        }
        
        public TicketManagement.Web.VenueService.Venue GetVenue(int id) {
            return base.Channel.GetVenue(id);
        }
        
        public System.Threading.Tasks.Task<TicketManagement.Web.VenueService.Venue> GetVenueAsync(int id) {
            return base.Channel.GetVenueAsync(id);
        }
        
        public int AddVenue(TicketManagement.Web.VenueService.Venue entity) {
            return base.Channel.AddVenue(entity);
        }
        
        public System.Threading.Tasks.Task<int> AddVenueAsync(TicketManagement.Web.VenueService.Venue entity) {
            return base.Channel.AddVenueAsync(entity);
        }
        
        public void UpdateVenue(TicketManagement.Web.VenueService.Venue entity) {
            base.Channel.UpdateVenue(entity);
        }
        
        public System.Threading.Tasks.Task UpdateVenueAsync(TicketManagement.Web.VenueService.Venue entity) {
            return base.Channel.UpdateVenueAsync(entity);
        }
        
        public void DeleteVenue(int id) {
            base.Channel.DeleteVenue(id);
        }
        
        public System.Threading.Tasks.Task DeleteVenueAsync(int id) {
            return base.Channel.DeleteVenueAsync(id);
        }
    }
}
